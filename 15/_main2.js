// Generated by CoffeeScript 1.6.3
(function() {
  var N, Node, countLeaves, populateTree, res, showTree, tree;

  res = 0;

  Node = (function() {
    function Node(down_count, right_count) {
      this.down_count = down_count;
      this.right_count = right_count;
      this.down = null;
      this.right = null;
    }

    Node.prototype.setDown = Node.down;

    Node.prototype.setRight = Node.right;

    Node.prototype.getDownCount = function() {
      return this.down_count;
    };

    Node.prototype.getRightCount = function() {
      return this.right_count;
    };

    return Node;

  })();

  N = 20;

  tree = new Node(0, 0);

  populateTree = function(root) {
    var d, r;
    if (root === void 0) {
      return;
    }
    d = root.getDownCount();
    r = root.getRightCount();
    if (d < N) {
      root.d = new Node(d + 1, r);
    }
    if (r < N) {
      root.r = new Node(d, r + 1);
    }
    populateTree(root.d);
    return populateTree(root.r);
  };

  showTree = function(root, deep) {
    var i, str, _i;
    if (root === void 0) {
      return;
    }
    str = "";
    for (i = _i = 1; 1 <= deep ? _i <= deep : _i >= deep; i = 1 <= deep ? ++_i : --_i) {
      str += "-";
    }
    str += "> (" + root.getDownCount() + ", " + root.getRightCount() + ")";
    console.log(str);
    showTree(root.d, deep + 1);
    return showTree(root.r, deep + 1);
  };

  countLeaves = function(root) {
    var d, r;
    if (root === void 0) {
      return 0;
    }
    if (root.d === void 0 && root.r === void 0) {
      return 1;
    }
    d = countLeaves(root.d);
    r = countLeaves(root.r);
    return d + r;
  };

  populateTree(tree);

  res = countLeaves(tree);

  console.log(res);

}).call(this);
